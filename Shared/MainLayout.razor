@inherits LayoutComponentBase
@inject NavigationManager _navigationManager
@implements IBrowserViewportObserver
@implements IAsyncDisposable


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@*<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        @*<MudMenu Label="Lokasjoner" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.TopLeft" Dense Variant="Variant.Text" Color="Color.Inherit" ActivationEvent="@MouseEvent.MouseOver">
        <MudMenuItem>
        <MudMenu Label="" Variant="Variant.Text" Color="Color.Inherit" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft" Dense>
        <ActivatorContent>
        <MudMenuItem><MudLink Href="/Lagerhotell/Rjukan">Kristiansund</MudLink></MudMenuItem>
        </ActivatorContent>
        <ChildContent>
        <MudMenuItem><MudLink Href="/Lagerhotell/Bremsnes"></MudLink>Bremsnes</MudMenuItem>
        <MudMenuItem><MudLink Href="/Lagerhotell/Rensvik"></MudLink>Renvik</MudMenuItem>
        </ChildContent>
        </MudMenu>
        </MudMenuItem>
        </MudMenu>
        <MudButton Color="Color.Inherit" Variant="Variant.Text" OnClick="@(() => OpenRightDrawer(Anchor.End))">Lokasjoner</MudButton>
        @if (rightSideBarOpen)
        {
            <MudDrawer @bind-Open="@rightSideBarOpen" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
                <Lagerhotell.Pages.SideBar.LocationsSideBar />
            </MudDrawer>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Lagerhotell</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>*@

<MudLayout>
    <MudAppBar Elevation="1">
        <MudContainer Style="padding-left: 16px; padding-right: 8px; max-width: 1100px;">
            <MudGrid Style="margin: 0 !important; width: 100% !important; color: white;">
                <MudImage Class="clickable" onclick="@RedirectToHome" Height="50" Width="40" Src="Data/Bilder/logoIkonHvit.png"></MudImage>
                @*Add link to settings/profile*@
                <AuthorizeView>
                    <NotAuthorized>
                <MudButton Style="margin-left: 8px;" Href="/logg-inn" Color="Color.Inherit" Variant="Variant.Text">Logg inn</MudButton>
                <MudButton Color="Color.Inherit" Href="/registrer-deg" Variant="Variant.Text">Registrer deg</MudButton>
                    </NotAuthorized>
                </AuthorizeView>
                <MudSpacer />
                <AuthorizeView Roles="Administrator">
                    <Authorized>
                        <MudButton Href="/admin" Color="Color.Inherit" Variant="Variant.Text">ADMIN</MudButton>
                    </Authorized>
                    <NotAuthorized></NotAuthorized>
                </AuthorizeView>
                <MudButton Color="Color.Inherit" Variant="Variant.Text" OnClick="@(() => OpenRightDrawer(Anchor.End))">Våre lagerhotell</MudButton>
                <MudDrawer @bind-Open="@rightSideBarOpen" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
                    <Lagerhotell.Pages.SideBar.LocationsSideBar />
                </MudDrawer>
            </MudGrid>
        </MudContainer>
    </MudAppBar>
    <MudMainContent Style="margin-bottom: 126px; display: flex; justify-content: center; max-height: fit-content;">
        @Body
    </MudMainContent>
    <FooterI></FooterI>
</MudLayout>

<style>
    .clickable:hover {
        cursor: pointer;
    }

    .mud-toolbar {
        padding: 0;
    }
</style>

@code {
    bool _drawerOpen = true;
    bool rightSideBarOpen;
    Anchor anchor;
    private Breakpoint _currentBreakpoint;
    [Inject]
    private IBrowserViewportService browserViewportService { get; set; }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OpenRightDrawer(Anchor anchor)
    {
        rightSideBarOpen = true;
        this.anchor = anchor;
        StateHasChanged();
    }

    void RedirectToHome()
    {
        _navigationManager.NavigateTo("/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await browserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await browserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
        {
            ReportRate = 250,
            NotifyOnBreakpointOnly = true
        };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        if (browserViewportEventArgs.IsImmediate)
        {
            _currentBreakpoint = browserViewportEventArgs.Breakpoint;
        }
        else
        {
            _currentBreakpoint = browserViewportEventArgs.Breakpoint;
            Console.WriteLine(_currentBreakpoint.ToString());
        }

        return InvokeAsync(StateHasChanged);
    }
}