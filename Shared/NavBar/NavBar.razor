@inject NavigationManager _navigationManager
@inject UserService _userService
@inject AppState _appState
@inject CompanyUserService _companyUserService
@inject Auth0Service _auth0Service
@inject AuthenticationStateProvider _authStateProviderService

<style>
    .clickable:hover {
        cursor: pointer;
    }
</style>

@if (isInitialized)
{
    <MudContainer Style="padding-left: 16px; padding-right: 8px; max-width: 1100px;">
        <MudGrid Style="margin: 0 !important; width: 100% !important; color: white; align-items: center;">
            <MudImage Class="clickable" onclick="@RedirectToHome" Height="50" Width="40" Src="Data/Bilder/logoIkonHvit.png"></MudImage>
            <MudButton Color="Color.Inherit" Style="margin-left: 6px;" Variant="Variant.Text" OnClick="@(() => OpenRightDrawer(Anchor.End))">Våre lagerhotell</MudButton>
            @*Add link to settings/profile*@
            <MudSpacer />
            <AuthorizeView>
                <NotAuthorized>
                    <MudButton Style="margin-left: 8px;" @onclick="RedirectToAuth0Login" Color="Color.Inherit" Variant="Variant.Text">Logg inn</MudButton>
                    <MudButton Style="color: white;" Href="/registrer-deg" Variant="Variant.Text">Registrer deg</MudButton>
                </NotAuthorized>
                <Authorized>
                    @if (user != null)
                    {
                        <MudAvatar @onclick="(() => NavigateToUserSettings(user))" class="clickable" Style="color: white; border: solid 2px white;" Variant="Variant.Outlined" Color="Color.Inherit">
                            @user.FirstName.Substring(0, 1)
                        </MudAvatar>
                    }
                    @if (companyUser != null)
                    {
                        <MudAvatar @onclick="(() => NavigateToUserSettings(companyUser))" class="clickable" Style="color: white; border: solid 2px white;" Variant="Variant.Outlined" Color="Color.Inherit">
                            @companyUser.FirstName.Substring(0, 1)
                        </MudAvatar>
                    }
                </Authorized>
            </AuthorizeView>
            <MudDrawer @bind-Open="@rightSideBarOpen" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
                <Lagerhotell.Pages.SideBar.LocationsSideBar />
            </MudDrawer>
        </MudGrid>
    </MudContainer>
}
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public EventCallback OnLogIn { get; set; }
    private bool isInitialized = false;
    bool rightSideBarOpen;
    Anchor anchor;
    private User user;
    private CompanyUser companyUser;

    void RedirectToHome()
    {
        _navigationManager.NavigateTo("/");
    }

    void OpenRightDrawer(Anchor anchor)
    {
        rightSideBarOpen = true;
        this.anchor = anchor;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _appState.OnChange += UpdateUserAndState;
        UpdateUserAndState();
        isInitialized = true;
    }

    private async void UpdateUserAndState()
    {
        string phoneNumber = "";
        try
        {
            string? jwt = await SessionService.GetJwtFromLocalStorage();
            /*if (jwt != null)
            {
                phoneNumber = await _authStateProviderService.GetCurrentUserPhoneNumber();
                companyUser = null;
                user = await _userService.GetUserByPhoneNumber(phoneNumber);
            }
            StateHasChanged();*/
        }
        catch (KeyNotFoundException)
        {
            try
            {
                user = null;
                companyUser = await _companyUserService.GetCompanyUserByPhoneNumber(phoneNumber);
                StateHasChanged();
            }
            catch (Exception e)
            {
                Snackbar.Add("En feil oppstod, vær så snill og logg inn på nytt", MudBlazor.Severity.Error);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Snackbar.Add("En feil oppstod", MudBlazor.Severity.Error);
        }
    }

    public void Dispose()
    {
        _appState.OnChange -= UpdateUserAndState;
    }

    private async Task NavigateToUserSettings(object userLoggedIn)
    {
        if (user is User)
        {
            _navigationManager.NavigateTo($"/user/{user.Id}");
        }
        else
        {
            _navigationManager.NavigateTo($"/user/{companyUser.CompanyUserId}");
        }
    }

    private async Task RedirectToAuth0Login()
    {
        await _auth0Service.RedirectToLoginPage();
    }
}
