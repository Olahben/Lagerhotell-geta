@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.IO
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Collections.Generic

<MudGrid>
    <MudItem Style="height: fit-content;">
<MudPaper MaxWidth="760px" Style="margin-top: 46px; padding: 12px; margin-left: 6px; margin-right: 6px; height: fit-content;">
    <EditForm Model="@accountFormValues" OnValidSubmit="SignupUser">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem Style="padding-bottom: 0;" xs="12" sm="12">
                <MudText Style="font-weight: 450;" Typo="Typo.h4">Registrer deg her</MudText>
                <MudText Typo="Typo.body1">Ett steg nærmere bedre plass</MudText>
            </MudItem>
            <MudItem Style="" xs="12" sm="6">
                <MudTextField T="string" Variant="Variant.Outlined" Class="form-text-field" Required="true" RequiredError="Ett navn er obligatorisk" Label="Fornavn" InputType="@InputType.Text" @bind-Value="accountFormValues.FirstName" For="@(() => accountFormValues.FirstName)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField T="string" Variant="Variant.Outlined" Class="form-text-field" Required="true" RequiredError="Ett etternavn er obligatorisk" Label="Etternavn" InputType="@InputType.Text" @bind-Value="accountFormValues.LastName" For="@(() => accountFormValues.LastName)" />
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudTextField T="string" Variant="Variant.Outlined" Class="form-text-field" Required="true" RequiredError="En fødselsdato er obligatorisk" Label="Fødslelsdato" InputType="@InputType.Date" @bind-Value="accountFormValues.BirthDate" For="@(() => accountFormValues.BirthDate)" />
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudTextField T="string" Variant="Variant.Outlined" Class="form-text-field" Required="true" Label="Adresse" InputType="@InputType.Text" @bind-Value="accountFormValues.Address" For="@(() => accountFormValues.Address)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField T="string" Variant="Variant.Outlined" Class="form-text-field" Required="true" Label="Postnummer" InputType="@InputType.Text" @bind-Value="accountFormValues.PostalCode" For="@(() => accountFormValues.PostalCode)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField T="string" Variant="Variant.Outlined" Class="form-text-field" Required="true" Label="Poststed" InputType="@InputType.Text" @bind-Value="accountFormValues.City" For="@(() => accountFormValues.City)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField T="string" Variant="Variant.Outlined" Class="form-text-field" Required="true" RequiredError="Ett mobilnummer er obligatorisk" Label="Mobilnummer" InputType="@InputType.Telephone" @bind-Value="accountFormValues.PhoneNumber" For="@(() => accountFormValues.PhoneNumber)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField T="string" Variant="Variant.Outlined" Class="form-text-field" Label="E-post" InputType="InputType.Email" @bind-Value="accountFormValues.Email" For="@(() => accountFormValues.Email)"></MudTextField>
            </MudItem>
            <MudItem xs="6" sm="6">
                <MudTextField T="string" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" Variant="Variant.Outlined" Class="form-text-field" Required="true" RequiredError="Ett passord er obligatorisk" Label="Passord" InputType="@PasswordInput" @bind-Value="accountFormValues.Password" For="@(() => accountFormValues.Password)" OnAdornmentClick="TogglePasswordVisibility" AdornmentAriaLabel="Vis passord" />
            </MudItem>
            <MudItem xs="6" sm="6">
                <MudTextField T="string" Variant="Variant.Outlined" Class="form-text-field" Required="true" RequiredError="Du må skrive inn passordet ditt på nytt" Label="Repeter passord" InputType="@InputType.Password" @bind-Value="accountFormValues.PasswordRepeat" For="@(() => accountFormValues.PasswordRepeat)" />
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary">Registrer deg</MudButton>
            </MudItem>
            @*
            <MudItem xs="6" sm="6">
                <MudCheckBox T="bool" Required="true" Label="Er du en administrator?" @bind-Value="accountFormValues.IsAdministrator" For="@(() => accountFormValues.IsAdministrator)"></MudCheckBox>
            </MudItem> *@
        </MudGrid>
    </EditForm>
</MudPaper>
        <MudText Style="text-align: center; margin-top: 6px;" Typo="Typo.body1">Har du registrert deg fra før av? Logg deg inn <MudLink Style="font-weight: 450;" Href="/logg-inn">her</MudLink></MudText>
    </MudItem>
</MudGrid>




@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject SessionService sessionService

@code {
    private AccountFormValues accountFormValues = new AccountFormValues();
    private static readonly HttpClient client = new HttpClient();
    private UserServiceSignup userServiceSignup = new UserServiceSignup();
    public string ErrorMessage = "";
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    bool showPassword;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    public class AccountFormValues
    {
        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [StringLength(36, ErrorMessage = "Maks 36 bokstaver, minimum 2", MinimumLength = 2)]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [StringLength(112, ErrorMessage = "Maks 112 bokstaver, minimum 2", MinimumLength = 2)]
        public string LastName { get; set; } = string.Empty;

        [UserServiceSignup.ContainsOnlyNumbers(ErrorMessage = "Telefonnummeret ditt kan bare inneholde tall")]
        [Required(ErrorMessage = "Ett telefonnummer er obligatorisk")]
        [StringLength(8, ErrorMessage = "Nummeret må være norskt, åtte siffer", MinimumLength = 8)]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [EmailAddress(ErrorMessage = "E-postaddressen din skal være i formatet abc@abc.com")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [UserServiceSignup.IsOverLegalAge(ErrorMessage = "Du må være over 18 år")]
        public string BirthDate { get; set; } = string.Empty;

        [StringLength(112, ErrorMessage = "Addressen din kan være 2-112 bokstaver/tall lang")]
        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [UserServiceSignup.ContainsNumbersAndLetters(ErrorMessage = "Dette feltet må inneholde bokstaver og tall")]
        public string Address { get; set; } = string.Empty;

        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [StringLength(4, ErrorMessage = "Dette må inneholde fire siffer", MinimumLength = 4)]
        public string PostalCode { get; set; } = string.Empty;

        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [StringLength(140, ErrorMessage = "Dette feltet må være 2-140 bokstaver langt")]
        [UserServiceSignup.ContainsOnlyLetters(ErrorMessage = "Dette feltet kan bare inneholde bokstaver")]
        public string City { get; set; } = string.Empty;

        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [StringLength(48, ErrorMessage = "Maks 48 tall eller bokstaver, minimum seks", MinimumLength = 8)]
        [UserServiceSignup.ContainsNumber(ErrorMessage = "Passordet ditt må ha minst ett tall")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [Compare(nameof(Password), ErrorMessage = "Passordene samstemmer ikke")]
        public string PasswordRepeat { get; set; } = string.Empty;

        [Required(ErrorMessage = "Obligatorisk")]
        public bool IsAdministrator { get; set; }
    }

    public async Task? SignupUser()
    {
        /* await PhoneNumberExistence(accountFormValues.PhoneNumber);
        StateHasChanged();
        if (phoneNumberRegistered == "")
            {
            RedirectToLogin();
            AddUser();
        } */
        try
        {
            // Should be returned the user and call navigate with user id
            string? userId;
            string? token;
            (userId, token) = await userServiceSignup.SignupUser(accountFormValues, client);
            await sessionService.AddJwtToLocalStorage(token);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo($"/user/{userId}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ErrorMessage = "En bruker med dette telefonnummeret er allerede registrert";
            Snackbar.Add(ErrorMessage, MudBlazor.Severity.Error);
            StateHasChanged();
        }
    }

    void TogglePasswordVisibility()
    {
        @if (showPassword)
        {
            showPassword = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            showPassword = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
