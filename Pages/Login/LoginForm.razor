@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Json
@using System.Collections.Generic
@using LagerhotellAPI.Models
@using LagerhotellAPI.Models.FrontendModels

@page "/log-in-form";

@inject HttpClient http
@inject NavigationManager navigationManager
@inject SessionService sessionService
@inject ISnackbar snackbar

<h2 style="text-align: center; color: #333;">Logg deg inn her:</h2>
<EditForm Model="logInValues" OnValidSubmit="LoginUser" class="login-form">
    <DataAnnotationsValidator />
    <MudGrid Style="max-width: 500px; margin: auto;">
        <MudItem xs="12">
            <MudTextField T="string" Class="form-text-field" Style="width: 100%;" HelperText="Mobilnummeret du brukte da du registrerte deg" Required="true" Label="Mobilnummer" InputType="@InputType.Telephone" @bind-Value="logInValues.PhoneNumber" For="@(() => logInValues.PhoneNumber)" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField T="string" Class="form-text-field" Style="width: 100%;" HelperText="Passordet du brukte da du registrerte deg" Required="true" Label="Passord" InputType="@InputType.Password" @bind-Value="logInValues.Password" For="@(() => logInValues.Password)" />
        </MudItem>
        <MudItem xs="12" Style="text-align: center;">
            <MudButton ButtonType="@ButtonType.Submit" Variant="@Variant.Filled" Color="Color.Primary" Style="width: 100%; max-width: 100px;">Logg inn</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    private static readonly HttpClient client = new HttpClient();
    private LogInValues logInValues = new LogInValues();
    private CheckPhoneNumber checkPhoneNumber = new CheckPhoneNumber();
    private readonly UserServiceLogin userServiceLogin = new();
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    public string ErrorMessage = "";


    public class LogInValues
    {
        [UserServiceSignup.ContainsNumber(ErrorMessage = "Passordet ditt må ha minst ett tall")]
        [Required(ErrorMessage = "Ett passord er obligatorisk")]
        [StringLength(48, ErrorMessage = "Maks 48 tall eller bokstaver, minimum seks", MinimumLength = 8)]
        public string? Password { get; set; }

        [UserServiceSignup.ContainsOnlyNumbers(ErrorMessage = "Telefonnummeret ditt kan bare inneholde tall")]
        [Required(ErrorMessage = "Ett telefonnummer er obligatorisk")]
        [StringLength(8, ErrorMessage = "Nummeret må være norskt, åtte siffer", MinimumLength = 8)]
        public string? PhoneNumber { get; set; }
    }

    public async void LoginUser()
    {
        string userJwt;
        string userId;
        try
        {
            (userJwt, userId) = await userServiceLogin.LoginUser(logInValues.PhoneNumber, logInValues.Password);
            await sessionService.AddJwtToLocalStorage(userJwt);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            StateHasChanged();
            navigationManager.NavigateTo($"user/{userId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Login form" + ex);
            ErrorMessage = "Mobilnummer eller passord er feil";
            snackbar.Add(ErrorMessage, Severity.Error);
        }
    }
}
