@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Json
@using System.Collections.Generic
@using LagerhotellAPI.Models
@using LagerhotellAPI.Models.FrontendModels

@page "/log-in-form";

@inject HttpClient http
@inject NavigationManager navigationManager
@inject SessionService sessionService
@inject ISnackbar snackbar
@inject AppState _appState
@inject UserServiceLogin _userServiceLogin

<MudGrid Style="margin-top: 126px;" Justify="Justify.Center">
    <MudItem Style="display: flex; justify-content: center;" xs="12">
        <MudPaper MaxWidth="440px" Style="padding: 18px;">
            <MudText Style="font-weight:450;" Typo="Typo.h4">Logg inn</MudText>
            <MudText Style="font-weight:450; margin-bottom: 18px;" Typo="Typo.body1">Bedre plass er ett steg nærmere</MudText>
            <EditForm Model="logInValues" OnValidSubmit="LoginUser" class="login-form">
                <DataAnnotationsValidator />
                <MudGrid Style="justify-content: start !important;">
                    <MudItem xs="12" Style="">
                        <MudTextField T="string" Class="form-text-field" Style="width: 100%;" HelperText="Mobilnummeret du brukte da du registrerte deg" Required="true" Label="Mobilnummer" InputType="@InputType.Telephone" @bind-Value="logInValues.PhoneNumber" For="@(() => logInValues.PhoneNumber)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem Style="padding-bottom: 0;" xs="12">
                        <MudTextField T="string" Class="form-text-field" Style="width: 100%;" HelperText="Passordet du brukte da du registrerte deg" Required="true" Label="Passord" InputType="@InputType.Password" @bind-Value="logInValues.Password" For="@(() => logInValues.Password)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem Style="margin-bottom: 22px;">
                        @*Should link to forgot password site*@
                        <MudText Style="text-decoration: underline;" Typo="Typo.body1">Glemt passord?</MudText>
                        </MudItem>
                        <MudItem xs="12" Style="text-align: center; padding-top: 0;">
                            <MudButton ButtonType="@ButtonType.Submit" Variant="@Variant.Filled" Color="Color.Primary" Style="width: 100%; max-width: 130px;">Logg inn</MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>

    @*<MudContainer Style="width: 100%; height: 100%; display:flex; justify-content: center; flex-wrap: nowrap; margin-top: 46px;">
    <MudPaper Elevation="2" Style="max-width: 640px;">
    <MudGrid Justify="Justify.Center" Style="width: 100%; height: 100%; margin: 0;">
        <MudItem xs="12"><MudText Style="font-weight:450;" Typo="Typo.h4">Logg inn</MudText></MudItem>
        <DataAnnotationsValidator />
        <MudForm>
        </MudForm>
    </MudGrid>
    </MudPaper>
</MudContainer>*@


    @code {
    private static readonly HttpClient client = new HttpClient();
    private LogInValues logInValues = new LogInValues();
    private CheckPhoneNumber checkPhoneNumber = new CheckPhoneNumber();
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    public string ErrorMessage = "";


    public class LogInValues
    {
        [UserServiceSignup.ContainsNumber(ErrorMessage = "Passordet ditt må ha minst ett tall")]
        [Required(ErrorMessage = "Ett passord er obligatorisk")]
        [StringLength(48, ErrorMessage = "Maks 48 tall eller bokstaver, minimum seks", MinimumLength = 8)]
        public string? Password { get; set; }

        [UserServiceSignup.ContainsOnlyNumbers(ErrorMessage = "Telefonnummeret ditt kan bare inneholde tall")]
        [Required(ErrorMessage = "Ett telefonnummer er obligatorisk")]
        [StringLength(8, ErrorMessage = "Nummeret må være norskt, åtte siffer", MinimumLength = 8)]
        public string? PhoneNumber { get; set; }
    }

    public async void LoginUser()
    {
        string userJwt;
        string userId;
        try
        {
            (userJwt, userId) = await _userServiceLogin.LoginUser(logInValues.PhoneNumber, logInValues.Password);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            StateHasChanged();
            navigationManager.NavigateTo($"user/{userId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Login form" + ex);
            ErrorMessage = "Mobilnummer eller passord er feil";
            snackbar.Add(ErrorMessage, MudBlazor.Severity.Error);
        }
    }
}
