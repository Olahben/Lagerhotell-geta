@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Json
@using System.Collections.Generic

@page "/log-in";

<h2>Logg deg inn her:</h2>
<EditForm Model="@logInValues" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" HelperText="Passordet du brukte da du registrerte deg" Required="true" Label="Passord" InputType="@InputType.Password" @bind-Value="logInValues.Password" For="@(() => logInValues.Password)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" HelperText="Mobilnummeret du brukte da du registrerte deg" Required="true" Label="Mobilnummer" InputType="@InputType.Telephone" @bind-Value="logInValues.PhoneNumber" For="@(() => logInValues.PhoneNumber)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton ButtonType="@ButtonType.Submit" Variant="@Variant.Filled" Color="Color.Primary">Logg inn</MudButton>
        </MudItem>
        <MudItem xs="6" sm="6">
            <MudText Color="Color.Error" Style="font-size: 16px">@CustomError</MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@inject HttpClient Http
@inject NavigationManager navigationManager
@code {
    private static readonly HttpClient client = new HttpClient();
    private LogInValues logInValues = new LogInValues();
    private LagerhotellAPI.Models.CheckPhoneNumber checkPhoneNumber = new LagerhotellAPI.Models.CheckPhoneNumber();
    private readonly Lagerhotell.Services.UserService.UserServiceLogin userServiceLogin = new Services.UserService.UserServiceLogin();
    public string PhoneNumberRegistered = "";
    public string CustomError = "";


    public class LogInValues
    {
        [Signup.ContainsNumber(ErrorMessage = "Passordet ditt må ha minst ett tall")]
        [Required(ErrorMessage = "Ett passord er obligatorisk")]
        [StringLength(48, ErrorMessage = "Maks 48 tall eller bokstaver, minimum seks", MinimumLength = 8)]
        public string Password { get; set; }

        [Signup.ContainsOnlyNumbers(ErrorMessage = "Telefonnummeret ditt kan bare inneholde tall")]
        [Required(ErrorMessage = "Ett telefonnummer er obligatorisk")]
        [StringLength(8, ErrorMessage = "Nummeret må være norskt, åtte siffer", MinimumLength = 8)]
        public string PhoneNumber { get; set; }
    }

    public async void LoginUser()
    {
        string result = await userServiceLogin.LoginUser(logInValues.PhoneNumber, logInValues.Password, navigationManager);
        Console.WriteLine(result);
        CustomError = result;
        StateHasChanged();
        // Handle returned value
    }
}
