@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Json
@using System.Collections.Generic

@page "/log-in";

<h2>Logg deg inn her:</h2>
<EditForm Model="@logInValues" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" HelperText="Passordet du brukte da du registrerte deg" Required="true" Label="Passord" InputType="@InputType.Password" @bind-Value="logInValues.Password" For="@(() => logInValues.Password)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" HelperText="Mobilnummeret du brukte da du registrerte deg" Required="true" Label="Mobilnummer" InputType="@InputType.Telephone" @bind-Value="logInValues.PhoneNumber" For="@(() => logInValues.PhoneNumber)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton ButtonType="@ButtonType.Submit" Variant="@Variant.Filled" Color="Color.Primary">Logg inn</MudButton>
        </MudItem>
        <MudItem>
            <MudText Color="Color.Error" Style="font-size: 16px">@CustomError</MudText>
        </MudItem>
        <MudItem xs="6" sm="6">
            <MudText Color="Color.Error" Style="font-size: 16px">@PasswordError</MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@inject HttpClient Http
@code {
    private static readonly HttpClient client = new HttpClient();
    private LogInValues logInValues = new LogInValues();
    private LagerhotellAPI.Models.CheckPhoneNumber checkPhoneNumber = new LagerhotellAPI.Models.CheckPhoneNumber();
    public string PhoneNumberRegistered = "";
    public string CustomError = "";
    public string PasswordError = "";


    public class LogInValues
    {
        [Signup.ContainsNumber(ErrorMessage = "Passordet ditt må ha minst ett tall")]
        [Required(ErrorMessage = "Ett passord er obligatorisk")]
        [StringLength(48, ErrorMessage = "Maks 48 tall eller bokstaver, minimum seks", MinimumLength = 8)]
        public string Password { get; set; }

        [Signup.ContainsOnlyNumbers(ErrorMessage = "Telefonnummeret ditt kan bare inneholde tall")]
        [Required(ErrorMessage = "Ett telefonnummer er obligatorisk")]
        [StringLength(8, ErrorMessage = "Nummeret må være norskt, åtte siffer", MinimumLength = 8)]
        public string PhoneNumber { get; set; }
    }

    public async Task? CheckPhoneNumber(string phoneNumber)
    {
        // Check if phone number exists
        // handle, some logic
        string url = "https://localhost:7272/users/is-phone-number-registered-registration";
        var request = new LagerhotellAPI.Models.CheckPhoneNumber.CheckPhoneNumberRequest { PhoneNumber = phoneNumber };
        string jsonData = JsonSerializer.Serialize(request);
        StringContent stringContent = new StringContent(jsonData, Encoding.UTF8, "application/json");

        HttpResponseMessage response = await client.PostAsync(url, stringContent);
        if (response.ReasonPhrase == "OK")
        {
            CustomError = "Dette mobilnummeret er ikke registrert i våre systemer";
        } else
        {
            CustomError = "";
        }
    }

    public async Task? CheckPassword(string password, string phoneNumber)
    {
        string url = "https://localhost:7272/users/check-password";
        var request = new LagerhotellAPI.Models.CheckPhoneNumber.CheckPhoneNumberRequest { PhoneNumber = phoneNumber };
        string jsonData = JsonSerializer.Serialize(request);
        StringContent stringContent = new StringContent(jsonData, Encoding.UTF8, "application/json");

        HttpResponseMessage response = await client.PostAsync(url, stringContent);
        // Should handle the response, compare the passwords and return an error if the passwords do not match
        Console.WriteLine("Response:" + response.Content.ReadAsStringAsync().Result.ToString());
        if (response.Content.ReadAsStringAsync().Result.ToString().Contains(password))
        {
            // Sucessfull login
            PasswordError = "";
        } else
        {
            PasswordError = "Feil Passord";
        }
    }

    public async void OnValidSubmit()
    {
        await CheckPhoneNumber(logInValues.PhoneNumber);
        StateHasChanged();
        await CheckPassword(logInValues.Password, logInValues.PhoneNumber);
        StateHasChanged();
    }
}
