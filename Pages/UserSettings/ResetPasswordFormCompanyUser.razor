@inject CompanyUserService _companyUserService
@inject Auth0Service _auth0Service
@inject AuthStateProviderService _customAuthStateProviderService
@using System.Data.SqlTypes

<MudForm @ref="_form" Validation="@(_companyUserValidator.ValidateValue)" Model="@companyUser">
    <MudItem>
        <MudTextField Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" T="string" Class="form-text-field" Style="width: 100%;" HelperText="Ditt nåværende passord" Required="true" RequiredError="Obligatorisk felt" Label="Passord" InputType="@PasswordInput" @bind-Value="oldPassword" Variant="Variant.Outlined" />
    </MudItem>
    <MudItem>
        <MudTextField Label="Nytt passord" Variant="Variant.Outlined" InputType="InputType.Password" @bind-Value="companyUser.Password" HelperText="" For="(() => companyUser.Password)" Immediate="true"></MudTextField>
    </MudItem>
    <MudItem>
        <MudTextField Label="Repeter nytt passord" Variant="Variant.Outlined" InputType="InputType.Password" @bind-Value="passwordRepeat" Required="true" RequiredError="Obligatorisk felt"></MudTextField>
    </MudItem>
    <MudItem>
        <MudButton Style="margin-top: 18px; margin-bottom: 18px;" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" @onclick="UpdatePassword">Oppdater passord</MudButton>
    </MudItem>
</MudForm>

@code {
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public EventCallback OnPasswordResetDone { get; set; }
    private UserAndCompanyUser user;
    private CompanyUser companyUser = new CompanyUser();
    private CompanyUserValidator _companyUserValidator = new CompanyUserValidator();
    private MudForm _form;


    private string oldPassword;
    private string newPassword;
    private string passwordRepeat;

    private bool _showPassword = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task UpdatePassword()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("Det er noe galt med verdiene du har fylt inn, vær så snill å sjekk tilhørende feilmelding", MudBlazor.Severity.Error);
            return;
        }
        if (companyUser.Password != passwordRepeat)
        {
            Snackbar.Add("Passordene er ikke like", MudBlazor.Severity.Error);
            return;
        }
        try
        {
            await _companyUserService.ResetPassword(UserId, companyUser.Password, oldPassword);
            Snackbar.Add("Passordet ble oppdatert", MudBlazor.Severity.Success);
            await UpdateOnPasswordResetDone();
        }
        catch (KeyNotFoundException)
        {
            Snackbar.Add("Brukeren ble ikke funnet, prøv igjen senere", MudBlazor.Severity.Error);
        }
        catch (SqlAlreadyFilledException)
        {
            Snackbar.Add("Det nye passordet er likt det gamle, prøv et annet passord", MudBlazor.Severity.Warning);
        }
        catch (SqlTypeException)
        {
            Snackbar.Add("Det gamle passordet er feil", MudBlazor.Severity.Error);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Snackbar.Add("Noe gikk galt, prøv igjen senere", MudBlazor.Severity.Error);
        }
    }

    private void TogglePasswordVisibility()
    {
        if (_showPassword)
        {
            _showPassword = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            _showPassword = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task UpdateOnPasswordResetDone()
    {
        await OnPasswordResetDone.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await _customAuthStateProviderService.GetUser();
        } catch (Exception e)
        {
            Console.WriteLine($"Kunne ikke hente brukeren");
            Snackbar.Add("Noe gikk galt, prøv igjen senere", MudBlazor.Severity.Error);
        }
    }
}
