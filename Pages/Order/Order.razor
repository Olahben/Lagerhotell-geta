@page "/bestill/{storageUnitId}"

@inject StorageUnitService _storageUnitService
@inject NavigationManager _navigationManager
@inject SessionService _sessionService

<MudContainer Style="max-width: 740px; padding: 16px;">
    <MudGrid Justify="Justify.Center" Style="">
        <MudText Style="font-weight: 400;" Typo="Typo.h2">Din bestilling</MudText>
        <Overview relevantStorageUnit=@relevantStorageUnit />
        <MovingInDate relevantOrder=@currentOrder />
        <Insurance relevantOrder=@currentOrder />
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public string storageUnitId { get; set; }
    string userAccessToken;
    StorageUnit relevantStorageUnit = new StorageUnit();
    LagerhotellAPI.Models.DomainModels.Order currentOrder = new()
    {
        OrderPeriod = new OrderPeriod()
        {
            OrderDate = DateTime.Now
        }

    };
    OrderValidator orderValidator = new();

    protected override async Task OnInitializedAsync()
    {
    try
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (authState.User.Identity.IsAuthenticated)
        {
            userAccessToken = await _sessionService.GetJwtFromLocalStorage();
        }
        else
        {
            Snackbar.Add("Du må være logget inn for å bestille", MudBlazor.Severity.Warning, config =>
            {
                config.Action = "Logg inn";
                config.ActionColor = Color.Primary;
                config.CloseAfterNavigation = true;
                config.Onclick = (Snackbar) => Task.Run(() => _navigationManager.NavigateTo("/logg-inn"));
            });
        }
        relevantStorageUnit = await _storageUnitService.GetStorageUnit(storageUnitId, userAccessToken);
        Console.WriteLine(relevantStorageUnit.Name);
    }
    catch (KeyNotFoundException e)
    {
        Console.WriteLine($"{e}");
    }
    catch (Exception e)
    {
        Console.WriteLine($"{e}");
    }
    }
}
