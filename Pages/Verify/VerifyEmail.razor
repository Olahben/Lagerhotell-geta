@page "/verifiser-epost"
@inject NavigationManager _navigationManager
@inject AppState _appState
@inject AuthenticateUserService _authenticationService
@inject CompanyUserService _companyUserService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject AuthStateProviderService _customAuthenticationStateprovider
@inject Auth0Service _auth0Service
@inject SessionService _sessionService
@inject CompanyUserService _companyUserService
@inject UserService _userService
@using System.Data.SqlTypes

@layout NoFooterOrNavBar


@if (isInitialized)
{
    <MudContainer Style="justify-content: start; display: flex; flex-direction: column; margin-top: 126px; max-width: 716px;">
        <MudText Style="text-align: start; text-decoration: underline;"><span @onclick="() => RedirectToRegister()" style="cursor: pointer; display: flex; align-content: center; gap: 6px; width: fit-content;"><MudIcon Icon="@Icons.Material.Filled.ArrowBack"></MudIcon> Gå tilbake</span></MudText>
        <MudPaper Elevation="2" Style="padding: 12px; padding-bottom: 46px;">
            <MudForm @ref="form">
                <MudText Typo="Typo.h4" Style="font-weight: 480; margin-bottom: 24px;">Verifiser e-post</MudText>
                @if (user.CompanyUser.FirstName != null)
                {
                    @*
            <MudBlazor.MudTextField @bind-Value="companyUser.Email" Variant="Variant.Outlined"></MudBlazor.MudTextField>
            *@
                    <MudTextField @bind-Value="email" T="string" Label="E-post" Variant="Variant.Outlined">Example@example.com</MudTextField>
                }
                else
                {
                    @*
            <MudBlazor.MudTextField @bind-Value="user.Email" Variant="Variant.Outlined"></MudBlazor.MudTextField>
            *@
                    <MudTextField @bind-Value="email" T="string" Label="E-post" Variant="Variant.Outlined"></MudTextField>
                }
                <MudButton Style="margin-top: 24px;" @onclick="() => SendNewVerificationEmail()" Color="Color.Primary" Variant="Variant.Outlined">Send ny e-post</MudButton>
                <MudButton Style="margin-top: 24px;" @onclick="() => CancelEmailVerification()" Color="Color.Primary" Variant="Variant.Outlined">Avbryt</MudButton>
            </MudForm>
        </MudPaper>
    </MudContainer>
}


@code {
    private UserAndCompanyUser user;
    private bool isInitialized = false;
    [Required(ErrorMessage = "Kodefeltet er påkrevd")]
    [Length(4, 4, ErrorMessage = "Koden må være 4 siffer")]
    private int userCode;
    private string email = "example@example.com";
    MudForm form;
    private string sendCodeButtonText = "60";
    private Timer _timer;

    private readonly UserServiceSignup _userServiceSignup = new UserServiceSignup();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await _customAuthenticationStateprovider.GetUser();
        }
        catch (Exception)
        {
            Snackbar.Add("Fant ikke brukeren", MudBlazor.Severity.Error);
        }
        isInitialized = true;
        Snackbar.Add("En e-post med en kode har blitt sendt til deg", MudBlazor.Severity.Success);
        await CountDown();
        _timer = new Timer(OnTimerCallback, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }


    FluentValueValidator<string> emailValidator = new FluentValueValidator<string>(x => x
    .EmailAddress());

    private void OnTimerCallback(object? state)
    {
        CheckEmailVerifiedStatus();
    }

    private async Task CheckEmailVerifiedStatus()
    {
        try
        {
            LagerhotellAPI.Models.DbModels.Auth0.UserAuth0 auth0User;
            bool companyUser = false;
            if (user.User.FirstName != null)
            {
                auth0User = await _auth0Service.GetAuth0UserbyAuth0Id(user.User.Auth0Id);
            }
            else
            {
                auth0User = await _auth0Service.GetAuth0UserbyAuth0Id(user.CompanyUser.Auth0Id);
                companyUser = true;

            }
            if (auth0User.EmailVerified)
            {
                if (!companyUser)
                {
                    User updatedUser = new User(user.User.Id, user.User.FirstName, user.User.LastName, user.User.PhoneNumber, user.User.BirthDate, user.User.Address, user.User.Password, user.User.IsAdministrator, user.User.Email, true, user.User.Auth0Id);
                    await _userService.UpdateUser(updatedUser);
                }
                else
                {
                    CompanyUser updatedCompanyUser = new CompanyUser(user.CompanyUser.CompanyUserId, user.CompanyUser.FirstName, user.CompanyUser.LastName, user.CompanyUser.Name, user.CompanyUser.CompanyNumber, user.CompanyUser.Email, user.CompanyUser.PhoneNumber, user.CompanyUser.Address, user.CompanyUser.Password, true, user.CompanyUser.Auth0Id);
                    await _companyUserService.UpdateCompanyUserAsync(updatedCompanyUser);
                }
                DisposeTimer();
                _navigationManager.NavigateTo($"user/{user.CompanyUser.CompanyUserId}");
            }
        }
        catch (HttpRequestException e)
        {
            if (e.Message.Contains("401"))
            {
                Snackbar.Add("Du er ikke autentisert, vennligst logg inn på nytt", MudBlazor.Severity.Error);
                await _sessionService.RemoveItemAsync("access_token");
                _navigationManager.NavigateTo("/logg-inn");
            }
            else if (e.Message.Contains("404"))
            {
                Snackbar.Add("Noe gikk galt, vennligst prøv igjen", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("Noe gikk galt, vennligst prøv igjen", MudBlazor.Severity.Error);
            }
        }
    }

    private async Task SendNewVerificationEmail()
    {
        string auth0Id;
        if (user.User.FirstName != null)

        {
            auth0Id = user.User.Auth0Id;
        }
        else
        {
            auth0Id = user.CompanyUser.Auth0Id;
        }
        try
        {
            await _auth0Service.SendNewVerificationEmail(auth0Id);
        }
        catch (Exception e)
        {
            Snackbar.Add("Noe gikk galt, vennligst prøv igjen", MudBlazor.Severity.Error);
        }
        Snackbar.Add("En ny e-post har blitt sendt til deg", MudBlazor.Severity.Success);
        await CountDown();
    }

    private async Task CancelEmailVerification()
    {
        try
        {
            if (user.User.FirstName != null)
            {
                DisposeTimer();
                await _auth0Service.CancelEmailVerification(user.User.Id);
            }
            else
            {
                DisposeTimer();
                await _auth0Service.CancelEmailVerification(user.CompanyUser.CompanyUserId);
            }
        }
        catch (InvalidOperationException)
        {
            // restart timer
            _timer = new Timer(OnTimerCallback, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
            Snackbar.Add("E-posten er allerede verifisert, vennligst vent før du blir sendt videre", MudBlazor.Severity.Error);
        }
        catch (Exception e)
        {
            // restart timer
            _timer = new Timer(OnTimerCallback, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
            Snackbar.Add("Noe gikk galt, vennligst prøv igjen. Last siden inn på nytt hvis feilen fortsetter.", MudBlazor.Severity.Error);
        }
    }

    public async Task CountDown()
    {
        int time = 60;
        while (time > 0)
        {
            sendCodeButtonText = time.ToString();
            time--;
            await Task.Delay(1000);
            StateHasChanged();
        }
        sendCodeButtonText = "Send kode på nytt";
        StateHasChanged();
    }

    private void RedirectToRegister()
    {
        _navigationManager.NavigateTo("/registrer-deg");
    }

    private void DisposeTimer()
    {
        _timer?.Dispose();
    }
}
