@inject SessionService _sessionService
@inject WarehouseHotelService _warehouseHotelService
@inject IDialogService _dialogService

<MudDialog @bind-IsVisible="MainDialogOpen">
    <DialogContent>
        <MudForm @ref="mainForm" Model="_newWarehouseHotel" Validation="@(_warehouseHotelValidator.ValidateValue)">
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" Label="Breddegrad" Immediate="true" @bind-Value="_newWarehouseHotel.Coordinate.Latitude" For="(() => _newWarehouseHotel.Coordinate.Latitude)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" Label="Lengdegrad" Immediate="true" @bind-Value="_newWarehouseHotel.Coordinate.Longitude" For="(() => _newWarehouseHotel.Coordinate.Longitude)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" Label="Hvor stor er den minste utleieenheten? (Oppgitt i meter2)" Immediate="true" @bind-Value="_newWarehouseHotel.StorageUnitsSizes.MinSize" For="(() => _newWarehouseHotel.StorageUnitsSizes.MinSize)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" Label="Hvor stor er den største utleieenheten? (Oppgitt i meter2)" Immediate="true" @bind-Value="_newWarehouseHotel.StorageUnitsSizes.MaxSize" For="(() => _newWarehouseHotel.StorageUnitsSizes.MaxSize)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" T="string" Label="Gateaddresse" Immediate="true" @bind-Value="_newWarehouseHotel.Address.StreetAddress" For="(() => _newWarehouseHotel.Address.StreetAddress)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" T="string" Label="Postkode" Immediate="true" @bind-Value="_newWarehouseHotel.Address.PostalCode" For="(() => _newWarehouseHotel.Address.PostalCode)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" T="string" Label="Poststed" Immediate="true" @bind-Value="_newWarehouseHotel.Address.City" For="(() => _newWarehouseHotel.Address.City)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" T="string" Label="Navn" Immediate="true" @bind-Value="_newWarehouseHotel.Name" For="(() => _newWarehouseHotel.Name)"></MudTextField>
            <MudTextField Required="true" T="string" Label="Tilhørende lokasjonsnavn" Immediate="true" @bind-Value="_newWarehouseHotel.LocationName" For="(() => _newWarehouseHotel.LocationName)"></MudTextField>
            <MudTextField Required="true" T="string" Lines="8" Label="Beskrivelse" Variant="Variant.Outlined" Immediate="true" @bind-Value="_oldWarehouseHotel.DetailedDescription" For="(() => _oldWarehouseHotel.DetailedDescription)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" Label="Åpningstid" Immediate="true" Placeholder="00-24" @bind-Value="_newWarehouseHotel.OpeningHours.Opens" For="(() => _newWarehouseHotel.OpeningHours.Opens)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" Label="Stengetid" Immediate="true" Placeholder="00-24" @bind-Value="_newWarehouseHotel.OpeningHours.Closes" For="(() => _newWarehouseHotel.OpeningHours.Closes)"></MudTextField>
            <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" T="string" Label="Mobilnummeret til kundeservice" Placeholder="12345678" Immediate="true" @bind-Value="_newWarehouseHotel.PhoneNumber" For="(() => _newWarehouseHotel.PhoneNumber)"></MudTextField>
            <MudSwitch Required="true" T="bool" Label="Har dette lagerhotellet tempererte utleie enheter?" @bind-Value="_newWarehouseHotel.ContainsTemperatedStorageUnits"></MudSwitch>
            <MudSwitch Required="true" T="bool" Label="Er dette lagerhotellet aktivt?" @bind-Value="_newWarehouseHotel.IsActive"></MudSwitch>
        </MudForm>
        <MudDialog @bind-IsVisible="SecondDialogOpen">
            <DialogContent>
                <MudForm @ref="secondaryForm" Model="_oldWarehouseHotel" Validation="@(_warehouseHotelValidator.ValidateValue)">
                    <MudTextField Required="true" RequiredError="Dette feltet kan ikke være tomt" @bind-Value="_oldWarehouseHotel.Name" For="(() => _oldWarehouseHotel.Name)" Immediate="true" Label="Navnet på lagerhotellet du vil endre"></MudTextField>
                </MudForm>
            </DialogContent>
            <DialogActions>
                <MudButton Color="Color.Primary" OnClick="GetOldWarehouseHotel">Ok</MudButton>
            </DialogActions>
        </MudDialog>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Avbryt</MudButton>
        <MudButton Color="Color.Primary" OnClick="Change">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    public bool MainDialogOpen { get; set; } = false;
    public bool SecondDialogOpen { get; set; } = true;
    MudForm mainForm;
    MudForm secondaryForm;
    private readonly WarehouseHotelValidator _warehouseHotelValidator = new WarehouseHotelValidator();
    private WarehouseHotel _oldWarehouseHotel = new WarehouseHotel
        {
            Coordinate = new Coordinate(),
            OpeningHours = new OpeningHours(),
            Address = new Address(),
            StorageUnitsSizes = new StorageUnitSizes(),
        };
    private WarehouseHotel _newWarehouseHotel = new WarehouseHotel
        {
            Coordinate = new Coordinate(),
            OpeningHours = new OpeningHours(),
            Address = new Address(),
            StorageUnitsSizes = new StorageUnitSizes(),
        };
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private int descriptionParas = 1;
    private List<string> detailedDescriptionParas = new List<string>();


    private async Task Change()
    {
        try
        {
            await mainForm.Validate();
            if (mainForm.IsValid)
            {
                string jwtToken = await _sessionService.GetJwtFromLocalStorage();
                await _warehouseHotelService.ChangeWarehouseHotel(_oldWarehouseHotel.Name, _newWarehouseHotel, jwtToken);
                Snackbar.Add("Lagerhotellet ble endret", MudBlazor.Severity.Success);
                await mainForm.ResetAsync();
            }
            else
            {
                Snackbar.Add("Det er noe galt med verdiene du har fylt inn, vær så snill å sjekk tilhørende feilmelding", MudBlazor.Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add("Noe gikk galt", MudBlazor.Severity.Error);
            Console.WriteLine($"{e}");
        }
    }

    private async Task GetOldWarehouseHotel()
    {
        try
        {
            await secondaryForm.Validate();
            if (secondaryForm.IsValid)
            {
                string jwtToken = await _sessionService.GetJwtFromLocalStorage();
                _oldWarehouseHotel = await _warehouseHotelService.GetWarehouseHotelByName(_oldWarehouseHotel.Name, jwtToken);
                _newWarehouseHotel = _oldWarehouseHotel;
                Snackbar.Add("Lagerhotellet ble hentet", MudBlazor.Severity.Success);
                await secondaryForm.ResetAsync();
                MainDialogOpen = true;
                SecondDialogOpen = false;
            }
            else
            {
                Snackbar.Add("Det er noe galt med verdiene du har fylt inn, vær så snill å sjekk tilhørende feilmelding", MudBlazor.Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add("Noe gikk galt", MudBlazor.Severity.Error);
            Console.WriteLine($"{e}");
        }
    }
    void Cancel() => MudDialog.Cancel();
}
