@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.IO
@using Newtonsoft.Json

@page "/sign-up";

<h2>Registrer deg her:</h2>
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
        <MudGrid>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" HelperText="Minimum to bokstaver" Required="true" RequiredError="Ett navn er obligatorisk" Label="Fornavn" InputType="@InputType.Text" @bind-Value="model.firstName" For="@(() => model.firstName)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" Required="true" HelperText="Minimum to bokstaver" RequiredError="Ett etternavn er obligatorisk" Label="Etternavn" InputType="@InputType.Text" @bind-Value="model.lastName" For="@(() => model.lastName)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" Required="true" HelperText="Ditt norske mobilnummer" RequiredError="Ett mobilnummer er obligatorisk" Label="Mobilnummer" InputType="@InputType.Telephone" @bind-Value="model.phoneNumber" For="@(() => model.phoneNumber)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" Required="true" HelperText="Datoen du ble født" RequiredError="En fødselsdato er obligatorisk" Label="Fødslelsdato" InputType="@InputType.Date" @bind-Value="model.birthDate" For="@(() => model.birthDate)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" Required="true" HelperText="Minimum seks bokstaver, og minst ett tall" RequiredError="Ett passord er obligatorisk" Label="Passord" InputType="@InputType.Password" @bind-Value="model.password" For="@(() => model.password)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Class="form-text-field" Required="true" HelperText="Skriv inn passordet på nytt" RequiredError="Du må skrive inn passordet ditt på nytt" Label="Repeter passord" InputType="@InputType.Password" @bind-Value="model.passwordRepeat" For="@(() => model.passwordRepeat)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" >Registrer deg</MudButton>
        </MudItem>
        <MudItem xs="8">@model.successMessage</MudItem>
    </MudGrid>
    </EditForm>


@code {
    private RegisterAccountFormValues model = new RegisterAccountFormValues();

    public class RegisterAccountFormValues
    {
        public string successMessage = "";

        [Required(ErrorMessage = "Ett fornavn er obligatorisk")]
        [StringLength(36, ErrorMessage = "Maks 36 bokstaver, minimum 2", MinimumLength = 2)]
        public string firstName { get; set; }

        [Required(ErrorMessage = "Ett etternavn er obligatorisk")]
        [StringLength(112, ErrorMessage = "Maks 112 bokstaver, minimum 2", MinimumLength = 2)]
        public string lastName { get; set; }

        [Required(ErrorMessage = "Ett telefonnummer er obligatorisk")]
        [StringLength(8, ErrorMessage = "Nummeret må være norskt, åtte siffer", MinimumLength = 8)]
        public string phoneNumber { get; set; }

        [Required(ErrorMessage = "En fødselsdato er obligatorisk")]
        [IsOverLegalAge(ErrorMessage = "Du må være over 18 år")]
        public string birthDate { get; set; }

        [Required(ErrorMessage = "Ett passord er obligatorisk")]
        [StringLength(48, ErrorMessage = "Maks 48 tall eller bokstaver, minimum seks", MinimumLength = 8)]
        [ContainsNumber(ErrorMessage="Passordet ditt må ha minst ett tall")]
        public string password { get; set; }

        [Required(ErrorMessage = "Du må repetere passordet ditt")]
        [Compare(nameof(password), ErrorMessage = "Passordene samstemmer ikke")]
        public string passwordRepeat { get; set; }

    }

    public void AddUser()
    {
        // Calls API to add user in JSON file
    }

    public void DisplayResult()
    {
        model.successMessage = "Du er registrert!";
    }

    public void OnValidSubmit()
    {
        DisplayResult();
        AddUser();
    }

  
    // Inherits from ValidationAttribute class
    public class ContainsNumberAttribute : ValidationAttribute
    {
        // Overrides the existing method IsValid in the ValidationAttribute class
        protected override ValidationResult IsValid(object value, ValidationContext validationContext) 
        {
            string password = value as string;
            // Checks if the password contains a number
            if (password.Any(char.IsDigit))
            {
                return ValidationResult.Success;
            } else
            {
                return new ValidationResult("Passordet ditt må ha minst ett tall");
            }
        }
    }

    // Inherits from the ValidationAttribute class
    public class IsOverLegalAgeAttribute : ValidationAttribute
    {
        // Overrides the existing method IsValid in the ValidationAttribute class
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            string birthDateStr = value as string;
            // format is with hyphens
            DateTime birthDate = DateTime.ParseExact(birthDateStr, "yyyy-MM-dd", CultureInfo.InvariantCulture);
            int age = DateTime.Now.Year - birthDate.Year;
            // Checks exactly if the person is over 18
            if (DateTime.Now.Month < birthDate.Month || (DateTime.Now.Month == birthDate.Month && DateTime.Now.Day < birthDate.Day))
                age--;

            if (age >= 18)
            {
                return ValidationResult.Success;
            }
            else
            {
                return new ValidationResult("Du må være over 18 år");
            }

        }
    }

}