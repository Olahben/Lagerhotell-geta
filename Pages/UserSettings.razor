@using System.Text
@using System.Text.Json
@using LagerhotellAPI.Models
@using Lagerhotell.Services.UserService

@page "/user/{userId}"

<MudGrid>
    <MudItem xs="12" md="3">
        <MudPaper Elevation="1">
            <MudList>
                <MudListItem>
                    <MudIcon Icon="@Icons.Material.Filled.AccountCircle" style="vertical-align: middle;" />
                    <span style="vertical-align: middle; margin-left: 8px;">Profil</span>
                </MudListItem>
                <MudListItem>
                    <MudIcon Icon="@Icons.Material.Filled.Security" style="vertical-align: middle;" />
                    <span style="vertical-align: middle; margin-left: 8px;">Sikkerhet</span>
                </MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="9">
        <MudPaper Elevation="1" Class="pa-4">
            <MudText Typo="Typo.h6">Profil</MudText>
            <MudText Typo="Typo.subtitle1">Velkommen, @_userValues.FirstName!</MudText>
                <MudDivider Class="my-4" />
                <div class="d-flex align-items-center">
                    <MudAvatar Src="path_to_image.jpg" />
                    <div class="ml-2">
                        <MudText Typo="Typo.subtitle1"><MudText Style=" font-weight:780; display:inline">@_userValues.FirstName</MudText> @_userValues.LastName</MudText>
                    </div>
                </div>
                <div Style="height: 8px"></div>
                @if (_editMode)
            {
                <MudButton Variant="Variant.Filled" @onclick=ToggleEditMode>Kanseller endringer</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" @onclick=ToggleEditMode>Endre</MudButton>
            }
            <div style="height:10px"></div>
            @if (_editMode)
            {
                <EditForm Model="@_userValues" OnValidSubmit="SaveUserValues" @ref="editForm">
                    <MudExpansionPanels MultiExpansion="true">
                        <MudExpansionPanel Text="Generelt">
                            <DataAnnotationsValidator />
                            <MudTextField Label="Mobilnummer" @bind-Value="_userValues.PhoneNumber" For="@(() => _userValues.PhoneNumber)" Variant="Variant.Outlined"
                                            FullWidth />
                             <MudDivider Class="my-4" />
                             <MudTextField Label="Fødselsdato" @bind-Value="_userValues.BirthDate" For="@(() => _userValues.BirthDate)" Variant="Variant.Outlined"
                                            FullWidth />
                             <MudDivider Class="my-4" />
                             <MudTextField @bind-Value="_userValues.Password" For="@(() => _userValues.Password)" Label="Password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                         </MudExpansionPanel>


                         <MudExpansionPanel Text="Bosted, Addresser">
                             <DataAnnotationsValidator />
                             <MudTextField Label="Adresse" @bind-Value="@_userValues.Address" For="@(() => _userValues.Address)" Variant="Variant.Outlined"
                                            FullWidth />
                             <MudDivider Class="my-4" />
                             <MudTextField Label="Postnummer" @bind-Value="@_userValues.PostalCode" For="@(() => _userValues.PostalCode)" Variant="Variant.Outlined"
                                            FullWidth />
                             <MudDivider Class="my-4" />
                             <MudTextField Label="By, Poststed" @bind-Value="@_userValues.City" For="@(() => _userValues.City)" Variant="Variant.Outlined"
                                            FullWidth />
                         </MudExpansionPanel>
                     </MudExpansionPanels>
                     <div style="height: 8px"></div>
                     <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Lagre endringer</MudButton>
                 </EditForm>
            }
            else
            {
                <MudExpansionPanels MultiExpansion="true">
                    <MudExpansionPanel Text="Generelt">
                        <MudText Typo="Typo.subtitle2">Mobilnummer</MudText>
                        <MudText>@_userValues.PhoneNumber</MudText>
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.subtitle2">Fødselsdato</MudText>
                            <MudText>@_userValues.BirthDate</MudText>
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.subtitle2">Passord</MudText>
                            <MudTextField @bind-Value="_userValues.Password" ReadOnly="true" Label="Password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Bosted, Addresser">
                            <MudText Typo="Typo.subtitle2">Addresse</MudText>
                            <MudText>@_userValues.Address</MudText>
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.subtitle2">Postnummer</MudText>
                            <MudText>@_userValues.PostalCode</MudText>
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.subtitle2">By, Poststed</MudText>
                            <MudText>@_userValues.City</MudText>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
            }
        </MudPaper>
    </MudItem>
</MudGrid>




@inject HttpClient Http
@inject SessionService sessionService
@inject ISnackbar snackBar
@code {
    private static readonly HttpClient client = new HttpClient();
    [Parameter] public string UserId { get; set; }
    private UserServiceUserSettings _userServiceUserSettings = new();
    private UserValues _userValues = new();
    private bool _editMode = false;
    private bool _showPassword = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    bool isShow;
    private EditForm editForm;

    public class UserValues
    {
        [Required(ErrorMessage = "Ett fornavn er obligatorisk")]
        [StringLength(36, ErrorMessage = "Maks 36 bokstaver, minimum 2", MinimumLength = 2)]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Ett etternavn er obligatorisk")]
        [StringLength(112, ErrorMessage = "Maks 112 bokstaver, minimum 2", MinimumLength = 2)]
        public string LastName { get; set; }

        [UserServiceSignup.ContainsOnlyNumbers(ErrorMessage = "Telefonnummeret ditt kan bare inneholde tall")]
        [Required(ErrorMessage = "Ett telefonnummer er obligatorisk")]
        [StringLength(8, ErrorMessage = "Nummeret må være norskt, åtte siffer", MinimumLength = 8)]
        public string PhoneNumber { get; set; }

        [Required(ErrorMessage = "En fødselsdato er obligatorisk")]
        [UserServiceSignup.IsOverLegalAge(ErrorMessage = "Du må være over 18 år")]
        public string BirthDate { get; set; }

        [UserServiceSignup.ContainsNumber(ErrorMessage = "Passordet ditt må ha minst ett tall")]
        [Required(ErrorMessage = "Ett passord er obligatorisk")]
        [StringLength(48, ErrorMessage = "Maks 48 tall eller bokstaver, minimum seks", MinimumLength = 8)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Du må repetere passordet ditt")]
        [Compare(nameof(Password), ErrorMessage = "Passordene samstemmer ikke")]
        public string PasswordRepeat { get; set; }

        [StringLength(112, ErrorMessage = "Addressen din kan være 2-112 bokstaver/tall lang")]
        [Required(ErrorMessage = "En addresse er obligatorisk")]
        [UserServiceSignup.ContainsNumbersAndLetters(ErrorMessage = "Dette feltet må inneholde bokstaver og tall")]
        public string Address { get; set; }

        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [StringLength(4, ErrorMessage = "Dette må inneholde fire siffer", MinimumLength = 4)]
        public string PostalCode { get; set; }

        [Required(ErrorMessage = "Dette feltet er obligatorisk")]
        [StringLength(140, ErrorMessage = "Dette feltet må være 2-140 bokstaver langt")]
        [UserServiceSignup.ContainsOnlyLetters(ErrorMessage = "Dette feltet kan bare inneholde bokstaver")]
        public string City { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string token = await sessionService.GetJwtFromLocalStorage();
            var user = await _userServiceUserSettings.LoadUser(client, _userValues, UserId, token);
            // Console.WriteLine(user.LastName);
            if (user != null)
            {
                _userValues.FirstName = user.FirstName;
                _userValues.LastName = user.LastName;
                _userValues.PhoneNumber = user.PhoneNumber;
                _userValues.BirthDate = user.BirthDate;
                _userValues.Address = user.Address;
                _userValues.PostalCode = user.PostalCode;
                _userValues.City = user.City;
                _userValues.Password = user.Password;
                snackBar.Add("Vellykket innlogging!", Severity.Success);
            }
            else
            {
                snackBar.Add("Kunne ikke laste inn brukeren", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            snackBar.Add("Kunne ikke laste inn brukeren", Severity.Error);
        }
        StateHasChanged();
    }

    public void ToggleEditMode()
    {
        _editMode = !_editMode;
        StateHasChanged();
    }

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    public async Task? SaveUserValues()
    {
        if (editForm.EditContext.Validate())
        {
            ToggleEditMode();
            // Save user changes if any
        }
        else
        {
            snackBar.Add("Noen felt er ikke riktig utfylt", Severity.Error);
        }
    }
}
