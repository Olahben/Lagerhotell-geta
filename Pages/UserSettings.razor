@using System.Text
@using System.Text.Json
@using LagerhotellAPI.Models

@page "/user/{userId}"

<MudCard Style="max-width: 500px; margin: auto; padding: 20px;">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" Style="text-align: center;">
            <MudText Typo="Typo.h5" Class="text-primary" Style="font-weight: 500;">Velkommen, @_userValues.FirstName!</MudText>
            <MudAvatar Src="profile.jpg" Size="Size.Large" Style="margin-bottom: 16px;"></MudAvatar>
        </MudItem>
        <MudItem xs="12" Style="padding: 10px;">
            <MudText Typo="Typo.h5" Style="font-weight: 500;">@_userValues.FirstName @_userValues.LastName</MudText>
            <MudText Style="font-size: 1.05rem; font-weight: 300;">Telefon: <span style="font-weight: 400;">@_userValues.PhoneNumber</span></MudText>
            <MudText Style="font-size: 1.05rem; font-weight: 300;">Fødselsdato: <span style="font-weight: 400;">@_userValues.BirthDate DD/MM/ÅÅÅÅ</span></MudText>
            <!-- Representing the Password as Hidden -->
            <MudText Style="font-size: 1.05rem; font-weight: 300;">Passord: <span style="font-weight: 400;">********</span></MudText>
        </MudItem>
    </MudGrid>
</MudCard>



@inject HttpClient Http
@code {
    private static readonly HttpClient client = new HttpClient();
    [Parameter] public string userId { get; set; }
    private User _userValues = new User();

    protected override async Task OnInitializedAsync()
    {
        string url = "https://localhost:7272/users/get-user";
        var request = new LagerhotellAPI.Models.GetUserRequest { UserId = userId };
        string jsonData = JsonSerializer.Serialize(request);
        StringContent stringContent = new StringContent(jsonData, Encoding.UTF8, "application/json");

        HttpResponseMessage response = await client.PostAsync(url, stringContent);
        if (response.IsSuccessStatusCode)
        {
            string result = await response.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
            LagerhotellAPI.Models.User deserializedUser = JsonSerializer.Deserialize<LagerhotellAPI.Models.User>(result, options);
            _userValues.FirstName = deserializedUser.FirstName;
            _userValues.LastName = deserializedUser.LastName;
            _userValues.PhoneNumber = deserializedUser.PhoneNumber;
            _userValues.BirthDate = deserializedUser.BirthDate;
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }
}
