@page "/lagerhotell/{warehouseHotelName}"
@inject WarehouseHotelService _warehouseHotelService
@inject NavigationManager _navigationManager
@inject SessionService _sessionService
@inject LagerhotellXService _lagerhotellXService
@inject StorageUnitService _storageUnitService
@inject TextHandler _textHandler
@inject FileHandler _fileHandler
@inject AssetService _assetService
@using LagerhotellAPI.Models.FrontendModels.Custom
@using System.Drawing;

<style>
    .lagerhotell-card-header {
        background-color: rgb(89, 74, 226);
        padding: 5%;
    }

    .pt-16 {
        padding-top: 0 !important;
    }

    .my-16 {
        margin-top: 32px !important;
    }

    .mud-container {
        padding-left: 8px;
        padding-right: 8px;
    }

    .lagerhotell-header-info {
        color: white;
    }

</style>

@if (isInitialized)
{
    @*Split views*@
    <MudContainer Style="justify-content: center; width: 1100px">
        <MudContainer Fixed="true" MaxWidth="MaxWidth.ExtraExtraLarge">
            <MudBreadcrumbs Style="padding-left: 0;" Items="BreadcrumbItems"></MudBreadcrumbs>
            <MudGrid Justify="Justify.Center">
                <MudItem Style="padding-right: 0;" xs="7" sm="7" md="7" lg="7" xl="7" xxl="7"> 
                    <MudPaper Square="true" Class="lagerhotell-card-header" Elevation="0" Height="400px" Color="Color.Primary">
                        <MudText Style="font-weight: 300;" Class="lagerhotell-header-info" Typo="Typo.h6">@relevantWarehouseHotel.Address.StreetAddress, @relevantWarehouseHotel.Address.PostalCode @relevantWarehouseHotel.Address.City</MudText>
                            <MudText Style="font-weight: 500;" Typo="Typo.h4" Class="lagerhotell-header-info">Lagring ved <div></div> @warehouseHotelName</MudText>
                            <MudText Style="font-weight: 300;" Typo="Typo.h6" Class="lagerhotell-header-info">Vanlige åpningstider: @OpeningTime - @ClosingTime</MudText>
                            <MudText Style="color: white; font-weight: 400;">Mobilnummer: @relevantWarehouseHotel.PhoneNumber</MudText>
                            <MudButton ButtonType="ButtonType.Button" Target="_blank" Href=@googleMapsUrl Variant="Variant.Outlined" Color="MudBlazor.Color.Inherit" EndIcon="@Icons.Material.Outlined.Map" Style="margin-top: 12px; color:white;">Vis på kart</MudButton>
                        </MudPaper>
                    </MudItem>
                    <MudItem Style="padding-left: 0;" xs="5" sm="5" md="5" lg="5" xl="5" xxl="5">
                        <MudPaper Elevation="0" Style="display: inline-block;" Height="400px">
                            <MudImage Style="width: 100%" ObjectFit="ObjectFit.Cover" Elevation="25" Height="400" Src="../../Data/Bilder/lagerhotell-bilde.jpg"></MudImage>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudContainer>

            <MudContainer Fixed="true" MaxWidth="MaxWidth.ExtraExtraLarge">
                <MudText Typo="Typo.h5">Våre størrelser</MudText>
                <AuthorizeView Roles="Administrator">
                    <Authorized>
                        <MudButton Style="margin-bottom: 18px;" Color="MudBlazor.Color.Primary" @onclick="OpenAddStorageUnitDialog" Variant="Variant.Filled">Legg til lagerenhet</MudButton>
                    </Authorized><NotAuthorized></NotAuthorized>
                </AuthorizeView>
                @if (RelevantStorageUnits.Count == 0)
            {
                <MudText Typo="Typo.h6">Fant ingen lagerenheter tilknyttet dette lagerhotellet</MudText>
            }
            else
            {
                <MudGrid Justify="Justify.Center">
                    @foreach (var size in RelevantStorageUnitsFrontend)
                    {
                        <StorageUnitUi Size="size"></StorageUnitUi>
                    }
                </MudGrid>
            }
        </MudContainer>
        <MudContainer Fixed="true" MaxWidth="MaxWidth.ExtraExtraLarge">
            <DetailedDescription OpeningTime="@OpeningTime" ClosingTime="@ClosingTime" ImageCarouselImages="@detailedDescriptionImages" DetailedDescriptionParas="@detailedDescriptionParagraphs" BulletPoints="@warehouseHotelBulletPoints" RelevantWarehouseHotel="@relevantWarehouseHotel"></DetailedDescription>
        </MudContainer>
    </MudContainer>
}
else
{
    <MudProgressCircular Indeterminate="true" />
}

@code {
    [Parameter]
    public string? warehouseHotelName { get; set; }
    private WarehouseHotel? relevantWarehouseHotel { get; set; }
    private List<BreadcrumbItem> BreadcrumbItems { get; set; } = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Hjem", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Lagerhotell", href: null, disabled: true, icon: Icons.Material.Filled.LocationCity),
    };
    private List<StorageUnit> RelevantStorageUnits { get; set; } = new List<StorageUnit>();
    private List<StorageUnitSize> RelevantStorageUnitsFrontend { get; set; } = new List<StorageUnitSize>();
    private bool isInitialized = false;
    private string OpeningTime { get; set; }
    private string ClosingTime { get; set; }
    public StorageUnit StorageUnitToAdd { get; set; } = new StorageUnit();
    private List<string> detailedDescriptionParagraphs = new List<string>();
    private List<string> warehouseHotelBulletPoints = new List<string>();
    private List<string> detailedDescriptionImages { get; set; } = new List<string>();
    private string? googleMapsUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string token = await _sessionService.GetJwtFromLocalStorage();

            relevantWarehouseHotel = await _warehouseHotelService.GetWarehouseHotelByName(warehouseHotelName, token);
            detailedDescriptionParagraphs = _textHandler.ParseParagraphs(relevantWarehouseHotel.DetailedDescription);
            warehouseHotelBulletPoints = _textHandler.ParseBulletPoints(relevantWarehouseHotel.BulletPoints);
            detailedDescriptionImages = await _assetService.GetWarehouseHotelImagecarouselImages(relevantWarehouseHotel.WarehouseHotelId);

            // Change href for location
            BreadcrumbItems.Add(new BreadcrumbItem(relevantWarehouseHotel.LocationName, href: null, icon: Icons.Material.Filled.MyLocation));
            BreadcrumbItems.Add(new BreadcrumbItem(relevantWarehouseHotel.Name, href: $"/lagerhotell/{relevantWarehouseHotel.Name}", icon: Icons.Material.Filled.LocationCity));

            OpeningTime = relevantWarehouseHotel.OpeningHours.Opens.ToString();
            ClosingTime = relevantWarehouseHotel.OpeningHours.Closes.ToString();
            (OpeningTime, ClosingTime) = _lagerhotellXService.CalculateTime(OpeningTime, ClosingTime, relevantWarehouseHotel);

            RelevantStorageUnits = await _storageUnitService.GetRelevantStorageUnits(relevantWarehouseHotel.WarehouseHotelId);
            RelevantStorageUnitsFrontend = await _lagerhotellXService.GetUniqueStorageUnitAreas(RelevantStorageUnits);

            googleMapsUrl = $"https://maps.google.com/?q={relevantWarehouseHotel.Coordinate.Latitude},{relevantWarehouseHotel.Coordinate.Longitude}";

            isInitialized = true;
        }
        catch (KeyNotFoundException e)
        {
            Console.WriteLine($"{e}");

            googleMapsUrl = $"https://maps.google.com/?q={relevantWarehouseHotel.Coordinate.Latitude},{relevantWarehouseHotel.Coordinate.Longitude}";
            isInitialized = true;
        }
        catch (Exception e)
        {
            Snackbar.Add($"Lagerhotell ${warehouseHotelName} kunne ikke hentes inn", MudBlazor.Severity.Error);
            Console.WriteLine($"{e}");
        }
    }

    private void OpenAddStorageUnitDialog()
    {
        var dialogParameterOptions = new DialogParameters<AddStorageUnit>
        {
            { "LinkedWarehouseHotelName", warehouseHotelName }
        };

        var dialogOptions = new DialogOptions { ClassBackground = "custom-class" };
        DialogService.Show<AddStorageUnit>("Legg til en lokasjon", dialogParameterOptions, dialogOptions);
        StateHasChanged();
    }
}
