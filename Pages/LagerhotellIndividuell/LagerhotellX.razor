@page "/lagerhotell/{warehouseHotelName}"
@inject WarehouseHotelService _warehouseHotelService
@inject NavigationManager _navigationManager
@inject SessionService _sessionService
@inject LagerhotellXService _lagerhotellXService
@inject StorageUnitService _storageUnitService
@using LagerhotellAPI.Models.FrontendModels.Custom

<style>
    .lagerhotell-card-header {
        background-color: rgb(89, 74, 226);
        padding: 5%;
    }

    .pt-16 {
        padding-top: 0 !important;
    }

    .my-16 {
        margin-top: 32px !important;
    }

    .mud-container {
        padding-left: 8px;
        padding-right: 8px;
    }

    .lagerhotell-header-info {
        color: white;
    }

    
</style>

@if (isInitialized)
{
    <MudBreadcrumbs Items="BreadcrumbItems"></MudBreadcrumbs>
    <MudContainer Class="lagerhotell-header-section" Fixed="true" MaxWidth="MaxWidth.ExtraExtraLarge">
        <MudGrid Justify="Justify.Center">
            <MudItem Style="padding-right: 0;" xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
            <MudPaper Square="true" Class="lagerhotell-card-header" Elevation="0" Height="400px" Color="Color.Primary">
                <MudText Style="font-weight: 300;" Class="lagerhotell-header-info" Typo="Typo.h6">@relevantWarehouseHotel.Address.StreetAddress, @relevantWarehouseHotel.Address.PostalCode @relevantWarehouseHotel.Address.City</MudText>
                    <MudText Style="font-weight: 500;" Typo="Typo.h4" Class="lagerhotell-header-info">Lagring ved <div></div> @warehouseHotelName</MudText>
                    <MudText Style="font-weight: 300;" Typo="Typo.h6" Class="lagerhotell-header-info">Vanlige åpningstider: @OpeningTime - @ClosingTime</MudText>
                    <MudText Style="color: white; font-weight: 400;">Mobilnummer: @relevantWarehouseHotel.PhoneNumber</MudText>
                </MudPaper>
                </MudItem>
                <MudItem Style="padding-left: 0;" xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
                <MudPaper Elevation="0" Style="display: inline-block;" Height="400px">
                    <MudImage ObjectFit="ObjectFit.Cover" Elevation="25" Height="400" Src="../../Data/Bilder/lagerhotell-bilde.jpg"></MudImage>
                </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>

    <MudContainer Fixed="true" MaxWidth="MaxWidth.ExtraExtraLarge">
        <MudText Typo="Typo.h5">Våre størrelser</MudText>
        <AuthorizeView Roles="Administrator">
            <Authorized>
                <MudButton Color="Color.Primary" @onclick="OpenAddStorageUnitDialog" Variant="Variant.Filled">Legg til lagerenhet</MudButton>
            </Authorized><NotAuthorized></NotAuthorized>
        </AuthorizeView>
        @if (RelevantStorageUnits.Count == 0)
        {
            <MudText Typo="Typo.h6">Fant ingen lagerenheter tilknyttet dette lagerhotellet</MudText>
        }
        else
        {
            <MudGrid Justify="Justify.Center">
                @foreach (var size in RelevantStorageUnitsFrontend)
                {
                    <StorageUnitUi Size="size"></StorageUnitUi>
                }
            </MudGrid>
        }
    </MudContainer>
}
else
{
    <MudProgressCircular Indeterminate="true" />
}

@code {
    [Parameter]
    public string? warehouseHotelName { get; set; }
    private WarehouseHotel? relevantWarehouseHotel { get; set; }
    private List<BreadcrumbItem> BreadcrumbItems { get; set; } = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Hjem", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Lagerhotell", href: null, disabled: true, icon: Icons.Material.Filled.LocationCity),
    };
    private List<StorageUnit> RelevantStorageUnits { get; set; } = new List<StorageUnit>();
    private List<StorageUnitSize> RelevantStorageUnitsFrontend { get; set; } = new List<StorageUnitSize>();
    private bool isInitialized = false;
    private string OpeningTime { get; set; }
    private string ClosingTime { get; set; }
    public StorageUnit StorageUnitToAdd { get; set; } = new StorageUnit();
    private bool ShowAddStorageUnitDialog = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string token = await _sessionService.GetJwtFromLocalStorage();
            relevantWarehouseHotel = await _warehouseHotelService.GetWarehouseHotelByName(warehouseHotelName, token);
            // Change href for location
            BreadcrumbItems.Add(new BreadcrumbItem(relevantWarehouseHotel.LocationName, href: null, icon: Icons.Material.Filled.MyLocation));
            BreadcrumbItems.Add(new BreadcrumbItem(relevantWarehouseHotel.Name, href: $"/lagerhotell/{relevantWarehouseHotel.Name}", icon: Icons.Material.Filled.LocationCity));
            OpeningTime = relevantWarehouseHotel.OpeningHours.Opens.ToString();
            ClosingTime = relevantWarehouseHotel.OpeningHours.Closes.ToString();
            (OpeningTime, ClosingTime) = _lagerhotellXService.CalculateTime(OpeningTime, ClosingTime, relevantWarehouseHotel);
            RelevantStorageUnits = await _storageUnitService.GetRelevantStorageUnits(relevantWarehouseHotel.WarehouseHotelId);
            RelevantStorageUnitsFrontend = await _lagerhotellXService.GetUniqueStorageUnitAreas(RelevantStorageUnits);
            isInitialized = true;
        }
        catch (KeyNotFoundException e)
        {
            // Snackbar.Add("Fant ingen lagerenheter tilknyttet dette lagerhotellet", MudBlazor.Severity.Error);
            Console.WriteLine($"{e}");
            isInitialized = true;
        }
        catch (Exception e)
        {
            Snackbar.Add($"Lagerhotell ${warehouseHotelName} kunne ikke hentes inn", MudBlazor.Severity.Error);
            Console.WriteLine($"{e}");
        }
    }

    private void OpenAddStorageUnitDialog()
    {
        var options = new DialogOptions { ClassBackground = "custom-class" };
        DialogService.Show<AddStorageUnit>("Legg til en lokasjon", options);
        ShowAddStorageUnitDialog = true;
        StateHasChanged();
    }
}
